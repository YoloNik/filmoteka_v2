{"version":3,"sources":["js/fetchApi.js","js/markup-movie-card.js","js/markup-library.js","library.js"],"names":["apiService","fetchAPI","constructor","searchQuery","page","genres","movieId","getTrendMovies","URLQuery","BASE_URL","API_KEY","encodeURIComponent","fetch","then","response","status","Error","json","data","catch","error","console","log","query","newQuery","getGenres","ok","Promise","reject","normaGenres","reduce","acc","id","name","genresValue","getSingleMovie","movieGallery","document","querySelector","errorText","fetchMoviesWhisGenres","style","visibility","movieData","results","map","movieEl","genre_ids","generEl","join","total_results","innerHTML","createCards","el","idx","movieCard","createElement","poster_path","title","release_date","substr","library","watchedBtn","queueBtn","optionsBtn","storageWatched","JSON","parse","localStorage","getItem","storageQueue","renderLibraryMarkup","renderMovie","addEventListener","toggleLibrary","e","target","classList","add","remove","storage","markup","releaseYear","insertAdjacentHTML"],"mappings":"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","file":"library.c957c46e.js","sourceRoot":"../src","sourcesContent":["class fetchAPI {\n  BASE_URL = 'https://api.themoviedb.org/3';\n  API_KEY = `87f9885ae1efa5e26738121aab64796c`;\n  constructor() {\n    this.searchQuery = '';\n    this.page = 1;\n    this.genres = {};\n    this.movieId = '';\n  }\n\n  async getTrendMovies() {\n    let URLQuery = this.searchQuery\n      ? `${this.BASE_URL}/search/movie?api_key=${\n          this.API_KEY\n        }&language=en-US&page=${\n          this.page\n        }&include_adult=false&query=${encodeURIComponent(this.searchQuery)}`\n      : `${this.BASE_URL}/trending/movie/week?api_key=${this.API_KEY}&page=${this.page}`;\n\n    return await fetch(URLQuery)\n      .then(response => {\n        if (response.status === 404) throw new Error();\n\n        return response.json();\n      })\n      .then(data => {\n        return data;\n      })\n      .catch(error => console.log(error));\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n\n  async getGenres() {\n    return await fetch(\n      `${this.BASE_URL}/genre/movie/list?api_key=${this.API_KEY}`\n    )\n      .then(data => {\n        if (data.ok) {\n          return data.json();\n        }\n        return Promise.reject(new Error('Error'));\n      })\n      .then(data => {\n        const normaGenres = data.genres.reduce((acc, { id, name }) => {\n          return { ...acc, [id]: name };\n        }, {});\n        this.genres = normaGenres;\n        return normaGenres;\n      })\n      .catch(error => console.log(error));\n  }\n  get genresValue() {\n    return this.genres;\n  }\n  async getSingleMovie() {\n    return await fetch(\n      `${this.BASE_URL}/movie/${this.movieId}?api_key=${this.API_KEY}`\n    )\n      .then(response => {\n        if (response.status === 404) throw new Error();\n\n        return response.json();\n      })\n      .then(data => {\n        return data;\n      })\n      .catch(error => console.log(error));\n  }\n}\n\nconst apiService = new fetchAPI();\nexport default apiService;\n","import apiService from './fetchApi';\n\nconst movieGallery = document.querySelector(`.gallery`);\nconst errorText = document.querySelector(`.search__error`);\n\nexport default function fetchMoviesWhisGenres() {\n  errorText.style.visibility = `hidden`;\n  apiService.getGenres();\n  apiService.getTrendMovies().then(movieData => {\n    const genres = apiService.genresValue;\n    const normaGenres = movieData.results.map(movieEl => {\n      return movieEl.genre_ids\n        .map(generEl => {\n          if (genres[generEl]) return genres[generEl];\n        })\n        .join(', ');\n    });\n    if (movieData.total_results === 0) {\n      movieGallery.innerHTML = '';\n      errorText.style.visibility = `visible`;\n    } else {\n      movieGallery.innerHTML = createCards(movieData.results, normaGenres);\n    }\n  });\n}\n\nexport function createCards(movieData, normaGenres) {\n  return movieData\n    .map((el, idx) => {\n      let movieCard = document.createElement(`div`);\n      return (movieCard.innerHTML = `<div class=\"movie-card\">\n<img src=\"${\n        el.poster_path\n          ? 'https://image.tmdb.org/t/p/w500' + el.poster_path\n          : 'https://expresspost.in///website/images/reporter_image/default.png'\n      }\" data-id=\"${el.id}\" alt=\"There should be a poster ðŸ˜®\">\n  <div class=\"movie-card__title\">\n\t\t<span>${el.title}</span>\n\t<div class=\"movie-card__info-item\">\n\t\t<span>${normaGenres[idx]} | ${el.release_date.substr(0, 4)}</span>\n\t</div>\n  </div>\n</div>`);\n    })\n    .join('');\n}\n","import { createCards } from './markup-movie-card';\n//import localStorageMovie from './local-storage';\nconst library = document.querySelector('.library');\nconst watchedBtn = document.querySelector('.watchet-btn');\nconst queueBtn = document.querySelector('.queue-btn');\nconst optionsBtn = document.querySelector('.nav-op');\n\nlet storageWatched = JSON.parse(localStorage.getItem(`watched`));\nlet storageQueue = JSON.parse(localStorage.getItem('queue'));\n\nexport default function renderLibraryMarkup() {\n  renderMovie(storageWatched);\n  optionsBtn.addEventListener('click', toggleLibrary);\n}\n\nfunction toggleLibrary(e) {\n  if (e.target === watchedBtn) {\n    watchedBtn.classList.add('active-btn');\n    queueBtn.classList.remove('active-btn');\n    renderMovie(storageWatched);\n  }\n  if (e.target === queueBtn) {\n    queueBtn.classList.add('active-btn');\n    watchedBtn.classList.remove('active-btn');\n    renderMovie(storageQueue);\n  }\n}\n\nfunction renderMovie(storage) {\n  library.innerHTML = '';\n  let markup = storage\n    .map(el => {\n      const normaGenres = el.genres.map(genres => genres[`name`]).join(', ');\n      return `<div class=\"movies-card\">\n      <img class=\"movies\" src=\"https://image.tmdb.org/t/p/w500${el.poster_path}\" data-id=\"${el.id}\">\n      <p class=\"movies_name\">\n        ${el.title}\n        <div class=\"movies_info\">\n          <span class=\"genres\">${normaGenres} | ${el.releaseYear}</span>\n        </div>\n      </p></div>`;\n    })\n    .join('');\n\n  library.insertAdjacentHTML('beforeend', markup);\n}\n","import renderLibraryMarkup from './js/markup-library';\n//const library = document.querySelector('.library');\n//console.log(library);\nrenderLibraryMarkup();\n"]}